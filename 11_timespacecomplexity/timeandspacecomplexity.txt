Basic definition:

Time complexity : 
It is the amount of time taken by an algorithm to run .

How it is measured ?
 1. Big O notation. (upper bound) => means at max i can eat 3 bananas at 5seconds .(means even thought i eat slowly it will take me a maxium of 5 seconds)
 2. Theta  (for avg-case-complexity) 
 3. Omega (lower bound) => means i can eat 5 bananas in 2 seconds

( Most used is Big O )

constant time => O(1) Eg: If a loop is running 10 times it is constant time
Linear time => O(n) Eg : if a loop is running from 1-n it is linear time 
Logarithimic time => O(log n) Eg : Binary search.
Quadratic time => O(n2) n square 2 Eg :nested loops 
Cubic time => O(n3) n cube  Eg : 3 nested loops 

graph for time complexity 

1. O(N!) => higher time complexity (It will take more time for running).
2. O(2^n)
3. O(N^3)
4. O(N^2)
5. O(N log N)
6. O(N)
7. O(Log N)
8. O(1) => Lowest time complexity (fastest)



Time Complexity

Time Complexity refers to the amount of time an algorithm takes to complete as a function of the size of the input. It provides an upper bound on the time required by an algorithm to run, which helps in comparing the efficiency of different algorithms.
Key Points:

    Big O Notation (O):
        Describes the upper bound of the time complexity.
        It represents the worst-case scenario and provides an asymptotic analysis.

    Common Time Complexities:
        O(1): Constant time - the algorithm takes the same time regardless of input size.
        O(log n): Logarithmic time - the time increases logarithmically with the input size.
        O(n): Linear time - the time increases linearly with the input size.
        O(n log n): Log-linear time - often seen in efficient sorting algorithms like Merge Sort.
        O(n^2): Quadratic time - the time increases quadratically with the input size, common in algorithms with nested loops.
        O(2^n): Exponential time - the time doubles with each additional element, common in brute-force algorithms.

    Examples:
        O(1): Accessing an element in an array.
        O(n): Traversing an array.
        O(n^2): Bubble sort.

How to Analyze:

    Identify the Basic Operations: Determine the core operations performed by the algorithm (e.g., comparisons, swaps).
    Count the Number of Operations: Express the number of operations as a function of the input size.
    Determine the Dominant Term: Simplify to the most significant term as the input size grows.

Space Complexity

Space Complexity refers to the amount of memory an algorithm uses in relation to the size of the input. It helps in understanding how much space an algorithm requires to execute.
Key Points:

    Big O Notation (O):
        Represents the upper bound of space requirements.
        Similar to time complexity, it provides an asymptotic analysis.

    Common Space Complexities:
        O(1): Constant space - the algorithm uses a fixed amount of space regardless of input size.
        O(n): Linear space - the space requirement grows linearly with the input size.
        O(n^2): Quadratic space - the space requirement grows quadratically.

    Examples:
        O(1): Using a fixed number of variables.
        O(n): Storing an array of size n.
        O(n^2): Using a 2D matrix for storing pairs.

How to Analyze:

    Identify the Extra Space: Determine the space used beyond the input.
    Count the Space Used: Express the space requirement as a function of the input size.
    Determine the Dominant Term: Simplify to the most significant term as the input size grows.

    Questions :
    calculate the time complexity 

1. f(n) -> 2n^2 + 3n 
  answer : O(n^2)

2. f(n) -> 4n^4 + 3n^3
   answer : O(n^4)

3. f(n) -> n^2 + Log n 
   answer : O(n^2)

4. f(n) -> 12001
   answer : O(1)

5. f(n) -> 3n^2 + 2n^2 + 5
   answer : O(n^3)

6. f(n) -> n^3/300
   answer : O(n^3)

7. f(n) -> 5n^2 + logn
   answer : O(n^2)

8. f(n) -> n/4
   answer : O(n)

9 f(n) -> n + 4 /4
  answer : O(n)

10 : 

int a = 0 , b = 0 ;
for(i = 0 ; i<N ; i++){
    a = a + rand();
}
for(j = 0 ; j<M ; j++){
    b = b + rand();
}

answer : O(n+m)

11 :
int a = 0 , b = 0 ;
for(i = 0 ; i<N ; i++){
    for(j = 0 ; j<N ; i++){
    a= a+j;
}
}
for(k = 0 ; k<N; k++){
    b = b + k;
}

answer : O(n^2) +O(n)
       = O(n^2)


12 : 

int a = 0  ;
for(i = 0 ; i<N ; i++){
    for(j = N ; j<i ; i--){
    a= a+i+j;
}
}

answer : O(n^2)

Space complexity problems 

13 . 
int a = 0 , b = 0 ;
for(i = 0 ; i<N ; i++){
    a = a + rand();
}
for(j = 0 ; j<M ; j++){
    b = b + rand();
}

answer : O(1)

14. int a = 0 , b = 0 ;
for(i = 0 ; i<N ; i++){
    for(j = 0 ; j<N ; i++){
    a= a+j;
}
}
for(k = 0 ; k<N; k++){
    b = b + k;
}

answer : O(1)

15 .

 int a = 0 ;
for(i = 0 ; i<N ; i++){
    for(j = N ; j>i ; j--){
    a= a+i+j;
}
}

answer : O(1)





